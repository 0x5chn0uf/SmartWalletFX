[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "pip>=20.1"
]
build-backend = "setuptools.build_meta"

[project]
name = "smartwalletfx"
version = "0.1.0"
description = "A wallet tracking application for EVM chains"
authors = [
    {name = "0x5chn0uf", email = "0x5chn0u@protonmail.com"},
]
dependencies = [
    "fastapi>=0.110.0",
    "uvicorn>=0.24.0",
    "sqlalchemy>=2.0.23",
    "pydantic>=2.5.2",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "web3>=6.11.3",
    "aiohttp>=3.9.1",
    "celery[redis]>=5.3.4",
    "redis>=5.0.0",
    "alembic>=1.12.1",
    "psycopg2-binary>=2.9.9",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "ccxt>=4.1.13",
    "email-validator>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "aiosqlite==0.21.0",
    "pytest==8.0.0",
    "pytest-cov==4.1.0",
    "pytest-asyncio==0.21.1",
    "pytest-env==1.1.1",
    "pytest-mock==3.12.0",
    "httpx==0.25.1",
    "build==0.10.0",
    "coverage==7.3.2",
    "ruff==0.1.5",
    "mypy==1.7.0",
    "black==23.11.0",
    "isort==5.12.0",
    "flake8==7.2.0",
    "types-requests==2.31.0.10",
    "types-python-jose==3.3.4.8",
    "types-passlib==1.7.7.13",
    "bandit==1.7.5",
    "safety==3.2.11",
    "detect-secrets==1.4.0",
    "pip-audit==2.6.1",
    "mkdocs==1.5.3",
    "mkdocs-material==9.4.8",
    "pre-commit==3.5.0",
    "debugpy==1.8.0",
    "respx==0.22.0",
    "hypothesis==6.135.10",
    "pytest-benchmark==4.0.0",
    "locust==2.27.0",
    "freezegun==1.4.0",
    "structlog==24.2.0"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = '-v --cov=app --cov-report=term-missing -m "not performance"'
filterwarnings = ["ignore::DeprecationWarning"]
markers = [
    "performance: slow performance / load tests"
]

[tool.flake8]
exclude = [
    "venv",
    "venv/*",
    ".venv",
    ".venv/*",
    ".git",
    "__pycache__",
    "build",
    "dist",
    "tests/",
    "migrations/"
]
max-line-length = 88
extend-ignore = ["E203"]
per-file-ignores = [
    "backend/app/abi/*.py:E501",
    "backend/migrations/env.py:E402,F403,F405",
    "backend/tests/**/*.py:F401,F811,E501",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 79

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.setuptools.packages.find]
exclude = ["abis"]

[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/migrations"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the exec runner,
# execute a binary
# name = "ruff"
# type = "exec"
# executable = "%(here)s/.venv/bin/ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"

