[build-system]
requires = ["setuptools>=61.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "smartwalletfx-backend"
version = "0.1.0"
description = "Backend for SmartWalletFX crypto portfolio tracker"
requires-python = ">=3.11"
license = "MIT"
authors = ["SmartWalletFX Team <team@smartwalletfx.com>"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn>=0.24.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.12.1",
    "psycopg2-binary>=2.9.9",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "pydantic>=2.5.1",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "aiohttp>=3.9.1",
    "pydantic-settings>=2.1.0",
    "ccxt>=4.1.13",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "httpx>=0.25.1",
    "pytest-env>=1.1.1",
    "pytest-mock>=3.12.0",
    "coverage>=7.3.2",
    "ruff>=0.1.5",
    "mypy>=1.7.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "types-requests>=2.31.0.10",
    "types-python-jose>=3.3.4.8",
    "types-passlib>=1.7.7.13",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "detect-secrets>=1.4.0",
    "pip-audit>=2.6.1",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "pre-commit>=3.5.0",
    "debugpy>=1.8.0",
]

[tool.setuptools]
package-dir = {"" = "app"}
packages = ["find:"]

[tool.setuptools.packages.find]
where = ["app"]
include = ["*"]
exclude = ["tests*"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/tests/
'''

[tool.flake8]
exclude = [".venv", "venv"]
extend-ignore = ["E501"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=app --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "raise ImportError",
    "except ImportError:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "B",  # flake8-bugbear
    "S",  # flake8-bandit
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "RUF", # Ruff-specific rules
]
ignore = ["E501"]  # Line length handled by formatter
line-length = 100
target-version = "py311"
extend-exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".eggs",
    ".tox",
    ".venv",
    "venv",
    ".env",
    "env",
    ".pytest_cache",
    ".coverage",
    "htmlcov",
    ".mypy_cache",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"test_*.py" = ["S101", "S105", "S404", "S603", "S607"]

[tool.ruff.isort]
known-first-party = ["app"]

[tool.ruff.flake8-bandit]
hardcoded-tmp-directory = ["os.tempnam", "os.tmpnam", "tempfile.mktemp"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Body"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true

[tool.bandit]
exclude_dirs = ['tests', 'venv', '.env', '.git', '__pycache__', 'node_modules']
skips = ['B101', 'B311']  # Skip assert statements and random number warnings
targets = ['backend']

[tool.bandit.assert_used]
skips = ['test_*.py', '*_test.py']
 