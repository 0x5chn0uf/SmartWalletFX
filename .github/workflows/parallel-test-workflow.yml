name: Enhanced Test Pipeline with Parallel Coverage

on:
  workflow_call:
    inputs:
      run_security_checks:
        description: "Run security and quality checks"
        type: boolean
        default: true
      run_performance_tests:
        description: "Run performance tests"
        type: boolean
        default: false
      run_docker_integration:
        description: "Run Docker integration tests"
        type: boolean
        default: true
      test_domains:
        description: "Comma-separated list of test domains to run (default: all)"
        type: string
        default: "auth,users,wallets,tokens,email_verification,oauth,password_reset,user_profile,jwks"
    outputs:
      security_result:
        description: "Result of security and quality checks"
        value: ${{ jobs.security-and-quality.result }}
      coverage_percentage:
        description: "Coverage percentage"
        value: ${{ jobs.coverage-report.outputs.coverage_percentage }}
      performance_tests_result:
        description: "Result of performance tests"
        value: ${{ jobs.performance-tests.result }}
      docker_integration_result:
        description: "Result of Docker integration tests"
        value: ${{ jobs.docker-integration.result }}

env:
  PYTHON_VERSION: "3.12"
  POETRY_VERSION: "1.7.1"
  COVERALLS_PARALLEL: true

jobs:
  # Security and quality checks (fast feedback)
  security-and-quality:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: inputs.run_security_checks || github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety ruff

      - name: Security scan with Bandit
        working-directory: backend
        run: bandit -r app/ -ll -x tests/

      - name: Dependency vulnerability check
        working-directory: backend
        run: safety check --json || true # Don't fail on safety issues in CI

      - name: Code quality with Ruff
        working-directory: backend
        run: ruff check app/ tests/

  # Run unit tests in parallel by domain
  unit-tests:
    name: Unit Tests - ${{ matrix.test-domain }}
    needs: [security-and-quality]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        test-domain: ["auth", "users", "wallets", "tokens", "email_verification", "oauth", "password_reset", "user_profile", "jwks"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov pytest-xdist coveralls
          pip install -e .[dev]

      - name: Start test database
        working-directory: backend
        run: make db-test

      # Run domain-specific unit tests with coverage
      - name: Run unit tests for domain
        working-directory: backend
        env:
          BCRYPT_ROUNDS: 4
          TEST_DB_URL: postgresql+asyncpg://testuser:testpass@localhost:55432/test_smartwallet
          COVERALLS_FLAG_NAME: unit-${{ matrix.test-domain }}
        run: |
          pytest tests/domains/${{ matrix.test-domain }}/unit/ \
            --cov=app \
            --cov-report=xml:coverage-unit-${{ matrix.test-domain }}.xml \
            -v

      # Upload coverage to Coveralls
      - name: Upload unit test coverage to Coveralls
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: backend/coverage-unit-${{ matrix.test-domain }}.xml
          flag-name: unit-${{ matrix.test-domain }}
          parallel: true

      # Stop test database
      - name: Stop test database
        if: always()
        working-directory: backend
        run: make db-stop

  # Run integration tests in parallel by domain
  integration-tests:
    name: Integration Tests - ${{ matrix.test-domain }}
    needs: [security-and-quality]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        test-domain: ["auth", "users", "wallets", "tokens", "email_verification", "oauth", "password_reset", "user_profile", "jwks"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov pytest-xdist coveralls
          pip install -e .[dev]

      - name: Start test database
        working-directory: backend
        run: make db-test

      # Run domain-specific integration tests with coverage
      - name: Run integration tests for domain
        working-directory: backend
        env:
          BCRYPT_ROUNDS: 4
          TEST_DB_URL: postgresql+asyncpg://testuser:testpass@localhost:55432/test_smartwallet
          COVERALLS_FLAG_NAME: integration-${{ matrix.test-domain }}
        run: |
          if [ -d "tests/domains/${{ matrix.test-domain }}/integration/" ]; then
            pytest tests/domains/${{ matrix.test-domain }}/integration/ \
              --cov=app \
              --cov-report=xml:coverage-integration-${{ matrix.test-domain }}.xml \
              -v
          else
            echo "No integration tests found for ${{ matrix.test-domain }} domain"
            echo '<?xml version="1.0" ?><coverage version="7.3.2" timestamp="1715805600" lines-valid="1" lines-covered="0" line-rate="0" branches-covered="0" branches-valid="0" branch-rate="0" complexity="0"><sources><source>/Users/Armand/Development/trading_bot_smc/backend</source></sources><packages></packages></coverage>' > coverage-integration-${{ matrix.test-domain }}.xml
          fi

      # Upload coverage to Coveralls
      - name: Upload integration test coverage to Coveralls
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: backend/coverage-integration-${{ matrix.test-domain }}.xml
          flag-name: integration-${{ matrix.test-domain }}
          parallel: true

      # Stop test database
      - name: Stop test database
        if: always()
        working-directory: backend
        run: make db-stop

  # Run infrastructure tests separately
  infra-tests:
    name: Infrastructure Tests
    needs: [security-and-quality]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov pytest-xdist coveralls
          pip install -e .[dev]

      - name: Start test database
        working-directory: backend
        run: make db-test

      # Run infrastructure tests with coverage
      - name: Run infrastructure tests
        working-directory: backend
        env:
          BCRYPT_ROUNDS: 4
          TEST_DB_URL: postgresql+asyncpg://testuser:testpass@localhost:55432/test_smartwallet
        run: |
          pytest tests/infrastructure/ \
            --cov=app \
            --cov-report=xml:coverage-infrastructure.xml \
            -v

      # Upload coverage to Coveralls
      - name: Upload infrastructure test coverage to Coveralls
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: backend/coverage-infrastructure.xml
          flag-name: infrastructure
          parallel: true

      # Stop test database
      - name: Stop test database
        if: always()
        working-directory: backend
        run: make db-stop

  # Finalize coverage report
  coverage-report:
    name: Finalize Coverage Report
    needs: [unit-tests, integration-tests, infra-tests]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      coverage_percentage: ${{ steps.get-coverage.outputs.coverage }}

    steps:
      - name: Finalize coverage report
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

      - name: Get coverage percentage
        id: get-coverage
        run: |
          # Use Coveralls API to get coverage percentage
          COVERAGE_DATA=$(curl -s "https://coveralls.io/github/${{ github.repository }}.json?repo_token=${{ secrets.GITHUB_TOKEN }}")
          COVERAGE=$(echo $COVERAGE_DATA | jq -r '.covered_percent')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Combined coverage: $COVERAGE%"

          # Check if coverage meets threshold
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "❌ Coverage below threshold: $COVERAGE% < 90%"
            echo "coverage_status=fail" >> $GITHUB_OUTPUT
          else
            echo "✅ Coverage meets threshold: $COVERAGE% >= 90%"
            echo "coverage_status=pass" >> $GITHUB_OUTPUT
          fi

  # Performance tests (benchmarking)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [coverage-report]
    if: inputs.run_performance_tests || github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-benchmark pytest-asyncio
          pip install -e .

      - name: Run performance tests
        working-directory: backend
        env:
          BCRYPT_ROUNDS: 1 # Minimal for performance testing
          TEST_TYPE: performance
        run: |
          pytest tests/ \
            -m performance \
            --benchmark-only \
            --benchmark-json=benchmark.json \
            --tb=short

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: backend/benchmark.json

  # Docker integration test (full system)
  docker-integration:
    name: Docker Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [coverage-report]
    if: inputs.run_docker_integration || github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start test services
        working-directory: backend
        run: |
          docker compose -f docker-compose.test.yml up -d postgres-test redis-test
          sleep 15  # Wait for services to be ready

      - name: Check service health
        working-directory: backend
        run: |
          docker compose -f docker-compose.test.yml ps
          # Verify PostgreSQL is accessible
          docker compose -f docker-compose.test.yml exec -T postgres-test pg_isready -U testuser
          # Verify Redis is accessible
          docker compose -f docker-compose.test.yml exec -T redis-test redis-cli ping

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio alembic
          pip install -e .

      - name: Run database migrations
        working-directory: backend
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpass@localhost:55432/test_smartwallet
        run: alembic upgrade head

      - name: Run Docker integration tests
        working-directory: backend
        env:
          TEST_DB_URL: postgresql+asyncpg://testuser:testpass@localhost:55432/test_smartwallet
          REDIS_URL: redis://localhost:6380/0
          ENVIRONMENT: testing
        run: |
          pytest tests/domains/*/integration/ \
            --tb=short \
            --maxfail=3 \
            -v

      - name: Cleanup Docker services
        if: always()
        working-directory: backend
        run: docker compose -f docker-compose.test.yml down -v

  # Test summary and reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [coverage-report, performance-tests, docker-integration]

    steps:
      - name: Generate test summary
        run: |
          echo "# Test Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: ${{ needs.coverage-report.outputs.coverage_percentage }}%" >> $GITHUB_STEP_SUMMARY
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Integration: ${{ needs.docker-integration.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add coverage badge
          echo "## Coverage Badge" >> $GITHUB_STEP_SUMMARY
          echo "[![Coverage Status](https://coveralls.io/repos/github/${{ github.repository }}/badge.svg?branch=${{ github.ref_name }})](https://coveralls.io/github/${{ github.repository }}?branch=${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY

      - name: Set pipeline status
        if: needs.coverage-report.outputs.coverage_status == 'fail'
        run: |
          echo "Coverage below threshold: ${{ needs.coverage-report.outputs.coverage_percentage }}% < 90%"
          exit 1
