name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PYTHON_VERSION: '3.12'
  CACHE_VERSION: 2  # Increment to invalidate cache

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Create virtual environment and install dependencies
        working-directory: ./backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Cache virtualenv
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-venv-

  isort:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore virtualenv
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-venv-

      - name: Run isort
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          isort --check-only --diff .

  black:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore virtualenv
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-venv-

      - name: Run black
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          black --check --diff .

  flake8:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore virtualenv
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-venv-

      - name: Run flake8
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          flake8 . --exclude=.venv,tests

  test-backend:
    needs: [isort, black, flake8]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore virtualenv
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-venv-

      - name: Run tests with coverage
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          PYTHONPATH=$(pwd) pytest -v --cov=app --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  build-backend:
    needs: test-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Restore virtualenv
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-venv-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-venv-

      - name: Build package
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          python -m build

  deploy-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy
        run: |
          echo "Deploying backend to production..."
          # Add deployment commands here

  notify:
    needs: [deploy-backend, build-backend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow status
        id: check
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=dc3545" >> $GITHUB_OUTPUT
            echo "icon=❌" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=28a745" >> $GITHUB_OUTPUT
            echo "icon=✅" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_link = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            const status = "${{ steps.check.outputs.status }}";
            const icon = "${{ steps.check.outputs.icon }}";
            
            const message = `${icon} Workflow ${context.workflow} ${status}\n
            Branch: ${context.ref}
            Commit: ${context.sha}
            Author: ${context.actor}
            Details: ${run_link}`;
            
            await github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: context.issue.number || context.payload.pull_request?.number,
              body: message
            }).catch(e => console.log('No PR/Issue associated with this run'));

      - name: Notify on Success
        if: steps.check.outputs.status == 'success'
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "View run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Notify on Failure
        if: steps.check.outputs.status == 'failure'
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "View run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" 