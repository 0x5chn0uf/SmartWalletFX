name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"
  pull_request:
    branches:
      - main
    paths-ignore:
      - "README.md"
  workflow_dispatch: # Allow manual trigger for testing

env:
  PYTHON_VERSION: "3.12"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Detect path changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

  setup:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/pyproject.toml') }}

      - name: Create virtual environment and install dependencies
        working-directory: ./backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -e .[dev]

  isort:
    needs: [setup, changes]
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/pyproject.toml') }}

      - name: Create virtual environment and install dependencies
        working-directory: ./backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run isort
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          isort --check-only --diff .

  black:
    needs: [setup, changes]
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/pyproject.toml') }}

      - name: Create virtual environment and install dependencies
        working-directory: ./backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run black
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          black --check --diff .

  flake8:
    needs: [setup, changes]
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/pyproject.toml') }}

      - name: Create virtual environment and install dependencies
        working-directory: ./backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run flake8
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          flake8 . --exclude=.venv,tests,migrations --max-line-length 88

  fixture-lint:
    needs: [setup, changes]
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/pyproject.toml') }}

      - name: Create virtual environment and install dependencies
        working-directory: ./backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run fixture-lint
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          fixture-lint check

  # Use the parallel testing workflow for better performance and coverage reporting
  parallel-backend-tests:
    needs: [isort, black, flake8, fixture-lint, changes]
    if: needs.changes.outputs.backend == 'true'
    uses: ./.github/workflows/parallel-test-workflow.yml
    with:
      run_security_checks: true
      run_performance_tests: ${{ github.ref == 'refs/heads/main' }}
      run_docker_integration: false
      test_domains: 'auth,users,wallets,tokens,email_verification,oauth,password_reset,user_profile,jwks'

  build-backend:
    needs: [parallel-backend-tests, changes]
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/pyproject.toml') }}

      - name: Create virtual environment and install dependencies
        working-directory: ./backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Build package
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          python -m build

  deploy-backend:
    needs: [build-backend, changes]
    if: needs.changes.outputs.backend == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy
        run: |
          echo "Deploying backend to production..."
          # Add deployment commands here

  build-frontend:
    needs: [isort, black, flake8, fixture-lint, changes]
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci --no-audit --fund=false

      - name: Generate design tokens
        working-directory: ./frontend
        run: npm run build:tokens --if-present

      - name: Lint frontend
        working-directory: ./frontend
        run: |
          if [ -f package.json ]; then npm run lint --if-present ; fi

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test:coverage

      - name: Run accessibility tests
        working-directory: ./frontend
        run: |
          if [ -f package.json ]; then
            npm run test -- --testNamePattern="accessibility" --passWithNoTests --run --reporter=verbose
          fi

      - name: Enforce frontend coverage threshold (75%)
        working-directory: ./frontend
        run: |
          node - <<'JS'
          const fs = require('fs');
          const summary = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
          const pct = summary.total.lines.pct;
          console.log(`Frontend coverage: ${pct}%`);
          if (pct < 75) {
            process.exit(1);
          }
          JS

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

  deploy-frontend:
    needs: [build-frontend, changes]
    if: needs.changes.outputs.frontend == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy frontend
        run: |
          echo "Deploying frontend to production..."
          # Add deployment commands here

  notify:
    needs: [deploy-backend, build-backend, deploy-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow status
        id: check
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=dc3545" >> $GITHUB_OUTPUT
            echo "icon=❌" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=28a745" >> $GITHUB_OUTPUT
            echo "icon=✅" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_link = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;
            const status = "${{ steps.check.outputs.status }}";
            const icon = "${{ steps.check.outputs.icon }}";

            const message = `${icon} Workflow ${context.workflow} ${status}\n
            Branch: ${context.ref}
            Commit: ${context.sha}
            Author: ${context.actor}
            Details: ${run_link}`;

            await github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: context.issue.number || context.payload.pull_request?.number,
              body: message
            }).catch(e => console.log('No PR/Issue associated with this run'));

      - name: Notify on Success
        if: steps.check.outputs.status == 'success'
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "View run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Notify on Failure
        if: steps.check.outputs.status == 'failure'
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "View run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  e2e-cypress:
    needs: [build-backend, build-frontend, changes]
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        viewport: [desktop, mobile]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create empty .env file for compose
        run: echo "" > .env

      - name: Setup Node.js ${{ matrix.node-version }} and Cypress cache
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Cypress dependencies
        working-directory: ./frontend
        run: npm ci --no-audit --fund=false

      - name: Start services via docker-compose
        run: |
          docker compose -f docker-compose.ci.yml up -d --build

      - name: Wait for backend health
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8000/health > /dev/null; then
              echo "Backend is up" && break;
            fi
            echo "Waiting for backend..." && sleep 2;
          done
          # If backend failed, capture container logs for debugging
          if ! curl -s http://localhost:8000/health > /dev/null; then
            echo "Backend health check failed. Capturing container logs:"
            docker compose -f docker-compose.ci.yml logs backend
            exit 1
          fi

      - name: Run Cypress tests (${{ matrix.viewport }})
        working-directory: ./frontend
        run: |
          if [ "${{ matrix.viewport }}" = "mobile" ]; then
            npx cypress run --browser chrome --headless --config viewportWidth=375,viewportHeight=667
          else
            npx cypress run --browser chrome --headless
          fi

      - name: Upload Cypress artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: frontend/cypress/screenshots

      - name: Shutdown docker-compose
        if: always()
        run: docker compose -f docker-compose.ci.yml down
