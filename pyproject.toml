[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "pip>=20.1"
]
build-backend = "setuptools.build_meta"

[project]
name = "smartwalletfx"
version = "0.1.0"
description = "A wallet tracking application for EVM chains"
authors = [
    {name = "0x5chn0uf", email = "0x5chn0u@protonmail.com"},
]
dependencies = [
    # Core Framework
    "fastapi==0.115.12",        # API framework
    "uvicorn==0.24.0",          # ASGI server
    
    # Database
    "sqlalchemy==2.0.41",      # ORM
    "alembic==1.16.1",         # Database migrations
    "psycopg2-binary==2.9.10", # PostgreSQL adapter (sync)
    "asyncpg==0.29.0",         # PostgreSQL async adapter
    "aiosqlite==0.20.0",       # SQLite async adapter
    "aiofiles==24.1.0",        # Async file IO for tests
    
    # Data Validation & Settings
    "pydantic==2.9.2",         # Data validation
    "pydantic-settings==2.9.1", # Settings management with Pydantic
    "email-validator==2.1.1",  # For EmailStr validation in Pydantic
    
    # Security
    "python-jose[cryptography]==3.3.0", # JWT tokens
    "passlib[bcrypt]==1.7.4",           # Password hashing
    "python-multipart==0.0.6",          # Form data parsing
    
    # HTTP & Utilities
    "python-dotenv==1.0.0",    # Environment management
    "requests==2.31.0",        # HTTP client for external APIs
    "aiohttp==3.12.12",        # Async HTTP client
    
    # Task Queue & Cache
    "celery[redis]==5.5.3",    # Task queue
    "redis==5.2.1",            # Cache and message broker
    
    # Blockchain & Crypto
    "web3==7.12.0",            # Web3 library
    "ccxt==4.1.13",            # Cryptocurrency exchange library
    
    # Monitoring & Storage
    "prometheus_client==0.20.0", # Prometheus metrics collection
    "boto3==1.34.135",         # AWS SDK
    "python-gnupg==0.5.2",     # GPG encryption
]

[project.optional-dependencies]
dev = [
    # Testing Framework
    "pytest==8.0.0",            # Testing framework
    "pytest-cov==4.1.0",        # Coverage reports
    "pytest-asyncio==0.21.1",   # Async testing support
    "pytest-env==1.1.1",        # Environment variables for tests
    "pytest-mock==3.12.0",      # Mock objects for tests
    "pytest-benchmark==4.0.0",  # Performance benchmarking
    "pytest-xdist==3.5.0",      # Parallel test execution
    "httpx==0.25.1",            # HTTP client for testing
    "coverage==7.3.2",          # Coverage measurement
    "hypothesis==6.135.10",     # Property-based testing
    "trio==0.25.0",             # Async testing backend
    "respx==0.22.0",            # HTTP mocking
    "freezegun==1.4.0",         # Time freezing for tests
    
    # Code Quality & Linting
    "ruff==0.1.5",              # Fast Python linter
    "black==23.11.0",           # Code formatter
    "isort==5.12.0",            # Import sorter
    "flake8==7.2.0",            # Code linter
    "pre-commit==3.5.0",        # Git pre-commit hooks
    
    # Type Stubs
    "types-requests==2.31.0.10",    # Type stubs for requests
    "types-python-jose==3.3.4.8",  # Type stubs for python-jose
    "types-passlib==1.7.7.13",     # Type stubs for passlib
    
    # Security Analysis
    "bandit==1.7.5",            # Security linter
    "safety==3.2.11",           # Vulnerability scanner
    "detect-secrets==1.4.0",    # Secrets detection
    "pip-audit==2.6.1",         # Package vulnerability scanner
    
    # Documentation
    "mkdocs==1.5.3",            # Documentation generator
    "mkdocs-material==9.4.8",   # Material theme for MkDocs

    # Fixture Management Tool
    "libcst==1.8.2",            # Concrete syntax tree parser
    "typer==0.16.0",            # CLI framework
    
    # Development Tools
    "build==0.10.0",            # Build tool
    "debugpy==1.8.0",           # Debugging support
    "structlog==24.2.0",        # Structured logging
    "coveralls>=4.0.0",         # Coverage reporting service (compatible with coverage 7.x)
    "docker==7.1.0",            # Docker API client
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = '-m "not performance"'
filterwarnings = ["ignore::DeprecationWarning"]
markers = [
    "performance: slow performance / load tests",
    "integration: mark test as integration test (may use PostgreSQL)",
    "unit: mark test as unit test (uses SQLite)",
    "nightly: mark test as nightly test (long-running)",
    "property: mark test as property-based test",
    "security: mark test as security-related test",
    "e2e: mark test as end-to-end test"
]

[tool.flake8]
exclude = [
    "venv",
    "venv/*",
    "backend/venv",
    "backend/venv/*",
    ".venv",
    ".venv/*",
    ".git",
    "__pycache__",
    "build",
    "dist",
    "tests/",
    "migrations/"
]
max-line-length = 88
extend-ignore = ["E203"]
per-file-ignores = [
    "app/abi/*.py:E501",
    "migrations/env.py:E402,F403,F405",
    "tests/**/*.py:F401,F811,E501",
]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 79

[tool.setuptools.packages.find]
exclude = ["abis"]

[project.scripts]
fixture-lint = "tools.fixture_lint.cli:app"

[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/migrations"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the exec runner,
# execute a binary
# name = "ruff"
# type = "exec"
# executable = "%(here)s/.venv/bin/ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"

